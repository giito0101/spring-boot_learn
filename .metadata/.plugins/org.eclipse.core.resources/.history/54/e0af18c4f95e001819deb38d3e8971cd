package com.practice.springboot.controller;

import java.util.Optional;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.practice.springboot.MyData2;
import com.practice.springboot.MyData3;
import com.practice.springboot.repositories.MyData2Repository;

@Controller
public class HeloController16 {
	@Autowired
	MyData2Repository repository;

	@RequestMapping(value="/",method=RequestMethod.GET)
	public ModelAndView index(
			ModelAndView mav,
			@ModelAttribute("formModel") MyData3 mydata3){
		mav.setViewName("view/index4");
		mav.addObject("msg","this is sample content.");
		Iterable<MyData3> list = repository.findAll();
		mav.addObject("datalist",list);
		return mav;
	}
	@RequestMapping(value="/",method=RequestMethod.POST)
	@Transactional(readOnly=false)
	public ModelAndView form(
			ModelAndView mav,
			@ModelAttribute("formModel") @Validated MyData3 mydata3,
			BindingResult result
			){
		ModelAndView res = null;
		if(!result.hasErrors()){
			repository.saveAndFlush(mydata2);
			res = new ModelAndView("redirect:/");
		}else{
			mav.setViewName("view/index4");
			mav.addObject("msg","sorry, error is occured ...");
			Iterable<MyData3> list = repository.findAll();
			mav.addObject("datalist",list);
			res = mav;
		}
		return res;
	}
	@RequestMapping(value="/edit/{id}",method=RequestMethod.GET)
	public ModelAndView index(ModelAndView mav,@PathVariable int id,@ModelAttribute("formModel") MyData3 mydata3){
		mav.setViewName("view/edit");
		mav.addObject("title","edit MyData2.");
		Optional<MyData3> data = repository.findById((long)id);
		mav.addObject("formModel",data.get());
		return mav;
	}
	@RequestMapping(value="/edit",method=RequestMethod.POST)
	@Transactional(readOnly=false)
	public ModelAndView update(ModelAndView mav,@ModelAttribute MyData3 mydata3){
		repository.saveAndFlush(mydata2);
		return new ModelAndView("redirect:/");
	}
	@RequestMapping(value="delete/{id}",method=RequestMethod.GET)
	public ModelAndView delete(@PathVariable int id,ModelAndView mav){
		mav.setViewName("view/delete");
		mav.addObject("title","delete MyData2.");
		Optional<MyData3> data=repository.findById((long)id);
		mav.addObject("formModel",data.get());
		return mav;
	}
	@RequestMapping(value="delete",method=RequestMethod.POST)
	@Transactional(readOnly=false)
	public ModelAndView remove(@RequestParam long id,ModelAndView mav){
		repository.deleteById(id);
		return new ModelAndView("redirect:/");
	}
	@PostConstruct
	public void init(){
		//1つめのダミーデータ作成
		MyData2 d1 = new MyData2();
		d1.setName("tuyano");
		d1.setAge(15);
		d1.setMail("syoda@tuyano.com");
		d1.setMemo("this is my data!");
		repository.saveAndFlush(d1);

		//２つ目のダミーデータ作成
		MyData2 d2 = new MyData2();
		d2.setName("hanako");
		d2.setAge(120);
		d2.setMail("hanako@tuyano.com");
		d2.setMemo("my girl friend.");
		repository.saveAndFlush(d2);

		//２つ目のダミーデータ作成
		MyData2 d3 = new MyData2();
		d3.setName("sachiko");
		d3.setAge(37);
		d3.setMail("sachico@tuyano.com");
		d3.setMemo("my work friend.");
		repository.saveAndFlush(d3);
	}
}
